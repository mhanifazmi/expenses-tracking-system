@inject ExpenseTrackingSystem.Data.ApplicationDbContext Context

@{
    ViewData["Title"] = "Home Page";
}
<div class="container-fluid">
    <div class="page-title">
        <div class="row">
            <div class="col-6 d-flex">
                <h3>Dashboard</h3>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-xl-6">
            <div class="card height-equal">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="recent-chart text-center">
                                <div class="card-body" style="padding: 0;">
                                    <div class="chart-overflow" id="categoryChart"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="card height-equal">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="recent-chart text-center">
                                <div class="card-body" style="padding: 0;">
                                    <div class="chart-overflow" id="accountChart"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/assets/js/chart/google/google-chart-loader.js"></script>
<script>
    var colorPalette = [
        '#FF5733',
        '#FFC300',
        '#36A2EB',
        '#4BC0C0',
        '#9966FF',
        '#FF6384',
        '#FF9F40',
        '#FFCE56',
        '#47D147',
        '#FF00BF',
        '#B266B2',
        '#40E0D0',
        '#FFD700',
        '#00FF7F',
        '#8A2BE2',
        '#FF4500',
        '#32CD32',
        '#9370DB',
        '#FF69B4',
        '#1E90FF'
    ];

    var chart1 = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.chart1))');
    var chart2 = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.chart2))');
    var categories = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.Category))');
    var accounts = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.Account))');
</script>
<script>
    google.charts.load('current', {packages: ['corechart', 'bar']});
    google.charts.load('current', {'packages':['line']});
    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(drawBasic);

    let chart1data = [];
    let chart2data = [];
    chart1data.push([
        'Category', 'Amount'
    ])
    chart2data.push([
        'Account', 'Amount'
    ])
    for (let i in chart1) {
        let category = chart1[i]

        chart1data.push([
            getCategory(category.category),
            category.totalAmount,
        ])
    }

    for (let i in chart2) {
        let account = chart2[i]

        chart2data.push([
            getCategory(account.account),
            account.totalAmount,
        ])
    }

    function getCategory(id) {
        for (let i in categories) {
            let category = categories[i]
            if (category.id == id) {
                return category.name;
            }
        }
        return '-';
    }

    function getAccount(id) {
        for (let i in accounts) {
            let account = accounts[i]
            if (account.id == id) {
                return account.name;
            }
        }
        return '-';
    }

    google.charts.load('current', { packages: ['corechart', 'bar'] });
    google.charts.load('current', { 'packages': ['line'] });
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback(drawBasic);
    function drawBasic() {
        if ($("#categoryChart").length > 0) {
            var data = google.visualization.arrayToDataTable(chart1data);
            var options = {
                title: 'Expense Distribution by Category',
                width: '100%',
                height: 300,
                colors: colorPalette
            };
            var chart = new google.visualization.PieChart(document.getElementById('categoryChart'));
            chart.draw(data, options);
        }
        if ($("#accountChart").length > 0) {
            var data = google.visualization.arrayToDataTable(chart2data);
            var options = {
                title: 'Account Distribution by Category',
                width: '100%',
                height: 300,
                colors: colorPalette
            };
            var chart = new google.visualization.PieChart(document.getElementById('accountChart'));
            chart.draw(data, options);
        }
    }
</script>

@functions {
    public string GetAccountName(int accountId)
    {
        if (Context != null)
        {
            var account = Context.Account.FirstOrDefault(a => a.Id == accountId);
            return account != null ? account.Name : "No Account";
        }
        return "-";
    }
}

@functions {
    public string GetCategoryName(int categoryId)
    {
        if (Context != null)
        {
            var category = Context.Category.FirstOrDefault(a => a.Id == categoryId);
            return category != null ? category.Name : "No Category";
        }
        return "-";
    }
}
